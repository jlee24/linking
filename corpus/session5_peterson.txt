Thank you, Doug. Before I get started I'm going to be talking about open-source. I should mention I'm not the worlds expert on open-source and I know there are many of you in the audience today who are quite knowledgeable on open-source. So, if I say anything that needs correction please jump right in, don't wait, we don't want to confuse anybody in the audience. Before I get started, how many of you here today already are fairly familiar with the concept of open-source? How many of you already feel that the open hyperdocument system really needs to be open-source? Okay, I guess I'm done and I'll just sit down now. For those of you out in the electronic audience, we had a very high show of hands on both of those questions. I'm not surprised. The open-source community for those of you who may not be familiar with it, I think is the best example of a networked improvement community that I can think of. It's really remarkably well organized considering that the organization comes from the bottom up. In other words, there is no top down organization, there are no governmental or corporate structures that make the open-source community work. The definition of open-source, that's on the web and I'll refer you to it at opensource.org, there is more to it then just the source code of software needs to be available. In addition there are other requirements, free redistribution without royalties, you have to be able to allow changes to the code and no discrimination. For example, it might be tempting to say, we want our software to be completely open-source and available to everyone, except for people at this one company. Now I won't give any names of a particular company, you make up your own company. The fact is you can't do that. It is either open-source to everyone or it's not open-source to anyone. That's why Sun, which has a real issue with one particular company, doesn't feel comfortable with the open-source model. They have come up with their own model, which we should cover; I think it's an interesting model. Examples of open-source software include Linux, of course, the operating system. Even more interesting then Linux, I think, is Apache the web server, which is extremely successful in the market place. I believe its still gaining market share, I think they have the highest market share and are still gaining market share against Microsoft for example. The open-source model is starting to catch on among many of the companies; in fact Apple is going partly open-source with their new operating system. HP is doing some open-source stuff, of course SGI has gone totally over to the open-source model as an attempt to come roaring back as they used to be. The only one who's really not playing, well Microsoft is not playing; the only one that you might expect to play who is not playing is Sun. They have gone for a different model; they are going for the Sun community license. The reason for that is Sun gets to keep ultimate control of the code that way and they feel strongly and sincerely that this is the way to go and it will benefit everyone. It's an experiment that I think we should have some sympathy with. I don't think we can say we've explored license space thoroughly for software, its early days yet. So I think if Bill Joy wants to do some experimentation, I think surely he's earned the right to do that given what he's given to the community. 

So what is required to have this process work? It's been said, by the fellow who did Tickle John Austerhout, that it takes about five thousand users to get a really healthy open-source effort going, that's users not developers. In other words, the pressure from five thousand users is enough to get a robust process working. So that will be our goal, I feel, that will be my goal for the open hyperdocument system, is to get whatever we come up with good enough so that there are five thousand people using it in a real way and then we'll have something that will successfully boot strap, continue to boot strap, we will have succeeded I feel if we can get that far. I should mention that open-source software is not a new idea at all; you know the previous term was free software and even before the term free software original software was all open-source, it was traditional for software to be open-source from the beginning. There has been no invention of an extremely new theory of software, in a way we have gone back to the roots of what worked in the early days when the Internet was originally developed. The reason that the name changed from free software, which is still a viable name and we use that sometimes when we want specify that specific subset, the reason it changed from free software to open-source is primarily because it was very hard to get companies to pay for free software. In fact you couldn't even get them to listen to free software or anything about it. They'd hear it, they think share ware, they would be extremely confused, it was necessary to come up with a little marketing spin so that's what was done. So it's not like there was a split in the movement or anything like that, it was just a marketing move. Why is open-source the way to go here? One of my favorite reasons is that it cannot be killed. Those of you who write code, if you ever written code for a company, you know that the company owns the code and if they want to use it for something, they use if for something, and if they don't they lock it up in a closet and it disappears forever. You can't do anything with it, nobody can do anything with it and given the way the IP laws work you are not even supposed to use the ideas, those ideas may belong to your employer now. It's very hard to do those kinds of divisions of your brain, so that oh I did that at IBM in 1989 and I did this at HP in 1990, that's not how the human brain works. This doesn't work very well in reality and when you think of the amount of intellectual property that's locked up in closets now and I love Xerox Park, but let's take them as an example. How much software developed by Xerox Park is just sort of sitting around doing nothing? The answer is, I think, is a huge amount and for no reason. What I think would make sense would be if in fact a company, any company, has software that they're not going to anything with. The reasonable thing to do, both for their own benefit and for the benefit of their employees is to open-source it. It helps the company's reputation. Another way it helps is by helping reduce the chance that some other company is going to patent the technology that this company has already come up with. If you have it in the closet nobody can tell that you had it earlier. The prior art is not out there. The way the patent system is going now anybody can patent anything, whether it is new or not, it happens all the time. So if you want to protect yourself and make sure your company will always have access to that technology, you're not using it in a commercial project, open-source it. Get it out there. Your programmers will love that. It will be a great recruiting tool if you can tell them; look if we are not going to commercialize it will be open-sourced. This helps the programmer's reputation and that's what motivates the very best programmers. Money? Yes they can get lots of money, but these people are artists. They love their work; they want to share their work with other people across company lines. How can you enable that? At the very least you can tell them look if we don't use it we'll can open-source it. How do you motivate people outside your company to help you with your open-source project? There is the reputation value. Let's say you've got a company Red Hat, lets take Red Hat, and how do you motivate people outside Red Hat to help Red Hat with their software? Well you may recall when Red Hat IPO'd they used the friends and family stock offer to reward key people who have helped them. So in a four-profit environment it is possible to give, not just reputation value, which the programmers value a lot, but actually cash, which is always nice, and is a symbolic of acknowledging their contribution, which they also like. Why am I focusing on the commercial side? The reason is that you can do a great open-source project, but unless it's eventually commercialized you don't have the marketing dollars to get the attention of people out in the world to get them to use this thing. You can have fantastic software but think of the volume of information that comes at you everyday about new web things. It's totally overwhelming; you have to fight it off. So how can you ever find out about good open-source software? Somebody has to have some dollars to get the news out to you. Another advanced of doing things in an open-source way that I don't hear mentioned very often and I think it's because companies don't really like to play this up, is that by making your product open-source you can pull help in from other companies, regardless if whether the other companies want to or not. The license of the code is set, it cannot be changed, it can't be stolen, so whether your employees can work on the code if they want to, which they are going to do whether you like it or not and the project is benefited no matter where these employees go and given the way they circulate so quickly now you can't do a project where every two years or six months you loose all the information in a human beings brain, you've got to have access to that. So for the project, if not for the employers, it's a big pay off to have continuing access to that expertise. I mentioned that open-source projects, I believe, get the best architects and programmers. I think there is no question about that, because they are getting reputation value of payments you'd have to pay them a lot more in cash to get them to give you their intellectual property, especially with the knowledge that you may lock it in a closet and their reputation may never benefit from this. A lot of you have probably, I know some of you here in the audience, have written books, if you've read a book contract the way it reads is if the book goes out of print the rights revert to the author. Right? Doesn't that make sense? If the company who owns this thing is no longer interested in it do they get to just lock it in a closet? No, it reverts to the author and you can see why that would make some sense with software as well. That's in essence what open-source ensures that the creator of this work will never loose access to at least the reputation value, he or she may loose everything else but the reputation value will stay. Open-source seems to be more likely to follow existing standards out in the world. You remember when there was the big Netscape Microsoft battle on the browser technology? The goal there was not to support existing standards; it was to do great new features regardless of what the standards were. Part of the reason for that is the standard organization was to slow and I think that's why the whole model of how do you establish standards and software is changing. I think instead of having a bunch of people sitting around a table or online debating making theoretical academic arguments, instead it will be an open-source process where the way you would establish a standard is by writing great code and showing, saying alright this is good and proving that way. If only all standards could be done that way, it would be great. I think for that reason open-source efforts tend to be much more likely to become standards. They're in conformance with existing standards and they move faster. I think open-source projects move faster, they have access to many more minds; the openness is critical to having a lot of input from people whose employers may not even approve of this. 

One common advance of open-source is said to be fewer bugs, that's kind of an obvious thing. If you think about a large software program, think about for an example Windows 2000, I've heard that it has fifty thousand lines of code.